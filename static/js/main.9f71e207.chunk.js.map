{"version":3,"sources":["helpers/UserID.ts","utils/fetchClient.ts","types/ErrorMessageEnum.ts","api/todos.ts","helpers/HelperFunctions.tsx","types/QueryEnum.ts","components/TodoList/TodoList.tsx","components/TodoApp/TodoApp.tsx","components/Footer/Footer.tsx","components/ErrorMessage/ErrorMessage.tsx","App.tsx","components/TodosFilter/TodosFilter.tsx","index.tsx"],"names":["USER_ID","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","ErrorMessageEnum","client","deleteTodo","todoId","updateTodo","editTodo","id","userId","title","completed","postTodo","QueryEnum","getData","setFunctions","setErrorMessage","a","forEach","setFunction","TodoLoadError","TodoList","todos","allTodos","setTodos","setAllTodos","tempTodo","useState","loader","seLoader","editID","setEditID","deleteID","setDeleteID","editInput","setEditInput","inputRef","useRef","handleCheckComplete","newTodos","map","todo","newTodo","UpdateTodoError","handleDeleteTodo","prevTodos","filter","DeleteTodoError","handleDobuleClick","current","focus","handleEditInputChange","event","target","value","saveEditTodo","preventDefault","currentTitle","trim","indexOfTodo","findIndex","undefined","className","data-cy","isEditing","classNames","type","checked","onChange","onSubmit","placeholder","ref","onBlur","onKeyDown","key","onKeyDownChange","onDoubleClick","onClick","TodoApp","setValue","disabledInput","setDisabledInput","setTempTodo","useEffect","addNewTodo","trimmedValue","TitleError","newTodoWithoutID","AddTodoError","handleSelectAllTodos","length","all","active","every","disabled","Footer","setQuery","All","selected","setSelected","activeTodos","completedTodos","handleSetQueryClick","deleteCompletedTodos","href","Active","Completed","ErrorMessage","errorMessage","isHidden","setIsHidden","hidden","App","query","preparedTodos","getPreparedTodos","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.9f71e207.chunk.js","sourcesContent":["export const USER_ID = 11619;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(100)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","// eslint-disable-next-line no-shadow\nexport enum ErrorMessageEnum {\n  TodoLoadError = 'Unable to load todos',\n  TitleError = 'Title should not be empty',\n  AddTodoError = 'Unable to add a todo',\n  DeleteTodoError = 'Unable to delete a todo',\n  UpdateTodoError = 'Unable to update a todo',\n}\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const updateTodo = (editTodo: Todo) => {\n  const {\n    id,\n    userId,\n    title,\n    completed,\n  } = editTodo;\n\n  return client.patch<Todo>(`/todos/${id}`, { userId, title, completed });\n};\n\nexport const postTodo = ({ title, userId, completed }: Omit<Todo, 'id'>) => {\n  return client.post<Todo>('/todos', { title, userId, completed });\n};\n","import { getTodos } from '../api/todos';\nimport { ErrorMessageEnum } from '../types/ErrorMessageEnum';\nimport { Todo } from '../types/Todo';\nimport { USER_ID } from './UserID';\n\nexport const getData = async (\n  setFunctions: React.Dispatch<React.SetStateAction<Todo[]>>[],\n  setErrorMessage: React.Dispatch<React.SetStateAction<'' | ErrorMessageEnum>>,\n) => {\n  try {\n    const data = await getTodos(USER_ID);\n\n    setFunctions.forEach(setFunction => setFunction(data));\n  } catch {\n    setErrorMessage(ErrorMessageEnum.TodoLoadError);\n  }\n};\n","// eslint-disable-next-line no-shadow\nexport enum QueryEnum {\n  All = 'All',\n  Completed = 'Completed',\n  Active = 'Active',\n}\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable max-len */\nimport React, { useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { ErrorMessageEnum } from '../../types/ErrorMessageEnum';\nimport { deleteTodo, updateTodo } from '../../api/todos';\n\ninterface Props {\n  todos: Todo[],\n  allTodos: Todo[],\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  setAllTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  setErrorMessage: React.Dispatch<React.SetStateAction<'' | ErrorMessageEnum>>,\n  tempTodo: Todo | null,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  allTodos,\n  setTodos = () => {},\n  setAllTodos = () => {},\n  setErrorMessage = () => {},\n  tempTodo,\n}) => {\n  const [loader, seLoader] = useState<boolean>(false);\n  const [editID, setEditID] = useState<number>();\n  const [deleteID, setDeleteID] = useState<number>();\n  const [editInput, setEditInput] = useState<string>('');\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const handleCheckComplete = async (id: number) => {\n    const newTodos = [...allTodos].map(todo => {\n      if (todo.id === id) {\n        const newTodo = { ...todo, completed: !todo.completed };\n\n        try {\n          updateTodo(newTodo);\n\n          return newTodo;\n        } catch {\n          setErrorMessage(ErrorMessageEnum.UpdateTodoError);\n        }\n      }\n\n      return todo;\n    });\n\n    setAllTodos(newTodos);\n    setTodos(newTodos);\n  };\n\n  const handleDeleteTodo = async (id: number) => {\n    setDeleteID(id);\n\n    seLoader(true);\n\n    try {\n      await deleteTodo(id);\n\n      setAllTodos(prevTodos => prevTodos.filter(todo => todo.id !== id));\n      setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id));\n    } catch {\n      setErrorMessage(ErrorMessageEnum.DeleteTodoError);\n    } finally {\n      seLoader(false);\n    }\n  };\n\n  const handleDobuleClick = (id: number, title: string) => {\n    setEditID(id);\n    setEditInput(title);\n\n    setTimeout(() => {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    }, 0);\n  };\n\n  const handleEditInputChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setEditInput(event.target.value);\n  };\n\n  const saveEditTodo = async (\n    id: number,\n    event?: React.FormEvent<HTMLFormElement>,\n  ) => {\n    event?.preventDefault();\n    const currentTitle = editInput.trim();\n\n    if (!currentTitle) {\n      handleDeleteTodo(id);\n\n      return;\n    }\n\n    if (!id) {\n      return;\n    }\n\n    const indexOfTodo = [...todos].findIndex(todo => todo.id === id);\n\n    if (currentTitle === todos[indexOfTodo].title) {\n      setEditID(undefined);\n      setEditInput('');\n\n      return;\n    }\n\n    try {\n      const newTodo = { ...todos[indexOfTodo], title: currentTitle };\n\n      await updateTodo(newTodo);\n\n      const newTodos = [...todos].map(todo => (todo.id === id ? newTodo : todo));\n\n      setAllTodos(newTodos);\n      setTodos(newTodos);\n    } catch {\n      setErrorMessage(ErrorMessageEnum.UpdateTodoError);\n    } finally {\n      setEditID(undefined);\n      setEditInput('');\n    }\n  };\n\n  const onKeyDownChange = (\n    event: React.KeyboardEvent<HTMLInputElement>,\n    id: number,\n  ) => {\n    if (event.key === 'Enter') {\n      saveEditTodo(id);\n    }\n\n    if (event.key === 'Escape') {\n      setEditID(undefined);\n      setEditInput('');\n    }\n  };\n\n  return (\n    <section className=\"todoapp__main\" data-cy=\"TodoList\">\n      {todos.map(todo => {\n        const { id, title, completed } = todo;\n        const isEditing = editID === id;\n\n        return (\n          <div\n            data-cy=\"Todo\"\n            className={classNames('todo', {\n              completed,\n            })}\n            key={id}\n          >\n            <label className=\"todo__status-label\">\n              <input\n                data-cy=\"TodoStatus\"\n                type=\"checkbox\"\n                className=\"todo__status\"\n                checked={completed}\n                onChange={() => handleCheckComplete(id)}\n              />\n            </label>\n            {\n              isEditing\n                ? (\n                  <form onSubmit={event => saveEditTodo(id, event)}>\n                    <input\n                      data-cy=\"TodoTitleField\"\n                      type=\"text\"\n                      className=\"todo__title-field\"\n                      placeholder=\"Empty todo will be deleted\"\n                      value={editInput}\n                      onChange={handleEditInputChange}\n                      ref={inputRef}\n                      onBlur={() => saveEditTodo(id)}\n                      onKeyDown={event => onKeyDownChange(event, id)}\n                    />\n                  </form>\n\n                ) : (\n                  <>\n                    <span\n                      data-cy=\"TodoTitle\"\n                      className=\"todo__title\"\n                      onDoubleClick={() => handleDobuleClick(id, title)}\n                    >\n                      {title}\n                    </span>\n\n                    <button\n                      type=\"button\"\n                      className=\"todo__remove\"\n                      data-cy=\"TodoDelete\"\n                      onClick={() => handleDeleteTodo(id)}\n                    >\n                      ×\n                    </button>\n                  </>\n                )\n            }\n            <div\n              data-cy=\"TodoLoader\"\n              className={classNames('modal overlay', {\n                'is-active': loader && deleteID === id,\n              })}\n            >\n              <div className=\"modal-background has-background-white-ter\" />\n              <div className=\"loader\" />\n            </div>\n          </div>\n        );\n      })}\n      {\n        tempTodo && (\n          <>\n            <div\n              data-cy=\"Todo\"\n              className={classNames('todo', {\n                completed: tempTodo.completed,\n              })}\n              key={tempTodo.id}\n            >\n              <label className=\"todo__status-label\">\n                <input\n                  data-cy=\"TodoStatus\"\n                  type=\"checkbox\"\n                  className=\"todo__status\"\n                  checked={tempTodo.completed}\n                  onChange={() => handleCheckComplete(tempTodo.id)}\n                />\n              </label>\n              <span\n                data-cy=\"TodoTitle\"\n                className=\"todo__title\"\n                onDoubleClick={() => handleDobuleClick(tempTodo.id, tempTodo.title)}\n              >\n                {tempTodo.title}\n              </span>\n\n              <button\n                type=\"button\"\n                className=\"todo__remove\"\n                data-cy=\"TodoDelete\"\n                onClick={() => handleDeleteTodo(tempTodo.id)}\n              >\n                ×\n              </button>\n              <div\n                data-cy=\"TodoLoader\"\n                className={classNames('modal overlay', {\n                  'is-active': true,\n                })}\n              >\n                <div className=\"modal-background has-background-white-ter\" />\n                <div className=\"loader\" />\n              </div>\n            </div>\n          </>\n        )\n      }\n    </section>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { ErrorMessageEnum } from '../../types/ErrorMessageEnum';\nimport { USER_ID } from '../../helpers/UserID';\nimport { postTodo } from '../../api/todos';\nimport { TodoList } from '../TodoList/TodoList';\n\ninterface Props {\n  todos: Todo[],\n  allTodos: Todo[],\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  setAllTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  setErrorMessage: React.Dispatch<React.SetStateAction<'' | ErrorMessageEnum>>,\n}\n\nexport const TodoApp: React.FC<Props> = ({\n  todos,\n  allTodos,\n  setTodos = () => { },\n  setAllTodos = () => { },\n  setErrorMessage = () => { },\n}) => {\n  const [value, setValue] = useState<string>('');\n  const [disabledInput, setDisabledInput] = useState<boolean>(false);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [disabledInput, todos]);\n\n  const addNewTodo = async () => {\n    const trimmedValue = value.trim();\n\n    if (!trimmedValue) {\n      setErrorMessage(ErrorMessageEnum.TitleError);\n\n      return;\n    }\n\n    setDisabledInput(true);\n\n    setTempTodo({\n      title: trimmedValue,\n      completed: false,\n      userId: USER_ID,\n      id: 0,\n    });\n\n    try {\n      const newTodoWithoutID = {\n        title: trimmedValue,\n        completed: false,\n        userId: USER_ID,\n      };\n\n      const newTodo = await postTodo(newTodoWithoutID);\n\n      setAllTodos(prevTodos => [...prevTodos, newTodo]);\n      setTodos(prevTodos => [...prevTodos, newTodo]); // ??\n      setValue('');\n    } catch {\n      setErrorMessage(ErrorMessageEnum.AddTodoError);\n    } finally {\n      setTempTodo(null);\n      setDisabledInput(false);\n    }\n  };\n\n  const handleChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    setValue(event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement> | null) => {\n    event?.preventDefault();\n\n    addNewTodo();\n  };\n\n  const handleSelectAllTodos = async () => {\n    try {\n      const isExistActive = [...allTodos]\n        .filter(todo => !todo.completed).length;\n\n      if (isExistActive !== 0) {\n        const newTodos = await Promise.all(allTodos\n          .map(todo => ({ ...todo, completed: true })));\n\n        setAllTodos(newTodos);\n        setTodos(newTodos);\n      } else {\n        const newTodos = await Promise.all(allTodos\n          .map(todo => ({ ...todo, completed: false })));\n\n        setAllTodos(newTodos);\n        setTodos(newTodos);\n      }\n    } catch {\n      setErrorMessage(ErrorMessageEnum.UpdateTodoError);\n    }\n  };\n\n  return (\n    <>\n      <header className=\"todoapp__header\">\n        {\n          allTodos.length !== 0 && (\n            <button\n              type=\"button\"\n              data-cy=\"ToggleAllButton\"\n              className={classNames('todoapp__toggle-all', {\n                active: allTodos.every(todo => todo.completed),\n              })}\n              onClick={handleSelectAllTodos}\n            />\n          )\n        }\n\n        <form onSubmit={handleSubmit}>\n          <input\n            data-cy=\"NewTodoField\"\n            type=\"text\"\n            className=\"todoapp__new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={value}\n            onChange={handleChangeInput}\n            ref={inputRef}\n            disabled={disabledInput}\n          />\n        </form>\n      </header>\n\n      <TodoList\n        todos={todos}\n        allTodos={allTodos}\n        setTodos={setTodos}\n        setAllTodos={setAllTodos}\n        setErrorMessage={setErrorMessage}\n        tempTodo={tempTodo}\n      />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { ErrorMessageEnum } from '../../types/ErrorMessageEnum';\nimport { Query } from '../../types/Query';\nimport { QueryEnum } from '../../types/QueryEnum';\nimport { deleteTodo } from '../../api/todos';\n\ninterface Props {\n  allTodos: Todo[],\n  setAllTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  setErrorMessage: React.Dispatch<React.SetStateAction<'' | ErrorMessageEnum>>\n  setQuery: React.Dispatch<React.SetStateAction<Query>>,\n}\n\nexport const Footer: React.FC<Props> = ({\n  allTodos,\n  setAllTodos = () => {},\n  setTodos = () => {},\n  setErrorMessage = () => {},\n  setQuery = () => {},\n}) => {\n  const [selected, setSelected] = useState<Query>(QueryEnum.All);\n\n  const activeTodos = [...allTodos]\n    .filter(todo => !todo.completed);\n\n  const completedTodos = [...allTodos]\n    .filter(todo => todo.completed);\n\n  const handleSetQueryClick = (value: Query) => {\n    setSelected(value);\n    setQuery(value);\n  };\n\n  const deleteCompletedTodos = async () => {\n    try {\n      await Promise.all(completedTodos.map(todo => deleteTodo(todo.id)));\n\n      setTodos(prevTodos => prevTodos\n        .filter(todo => !todo.completed));\n\n      setAllTodos(prevTodos => prevTodos\n        .filter(todo => !todo.completed));\n    } catch {\n      setErrorMessage(ErrorMessageEnum.DeleteTodoError);\n    }\n  };\n\n  return (\n    <>\n      {\n        !!allTodos.length && (\n          <footer className=\"todoapp__footer\" data-cy=\"Footer\">\n            <span className=\"todo-count\" data-cy=\"TodosCounter\">\n              {`${activeTodos.length} items left`}\n            </span>\n\n            <nav className=\"filter\" data-cy=\"Filter\">\n              <a\n                href=\"#/\"\n                className={classNames('filter__link', {\n                  selected: selected === QueryEnum.All,\n                })}\n                onClick={() => handleSetQueryClick(QueryEnum.All)}\n                data-cy=\"FilterLinkAll\"\n              >\n                All\n              </a>\n\n              <a\n                href=\"#/active\"\n                className={classNames('filter__link', {\n                  selected: selected === QueryEnum.Active,\n                })}\n                onClick={() => handleSetQueryClick(QueryEnum.Active)}\n                data-cy=\"FilterLinkActive\"\n              >\n                Active\n              </a>\n\n              <a\n                href=\"#/completed\"\n                className={classNames('filter__link', {\n                  selected: selected === QueryEnum.Completed,\n                })}\n                onClick={() => handleSetQueryClick(QueryEnum.Completed)}\n                data-cy=\"FilterLinkCompleted\"\n              >\n                Completed\n              </a>\n            </nav>\n\n            <button\n              type=\"button\"\n              className=\"todoapp__clear-completed\"\n              onClick={deleteCompletedTodos}\n              data-cy=\"ClearCompletedButton\"\n              disabled={!completedTodos.length}\n            >\n              Clear completed\n            </button>\n          </footer>\n        )\n      }\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { ErrorMessageEnum } from '../../types/ErrorMessageEnum';\n\ninterface Props {\n  errorMessage: ErrorMessageEnum | '';\n  setErrorMessage: React.Dispatch<React.SetStateAction<'' | ErrorMessageEnum>>,\n}\n\nexport const ErrorMessage: React.FC<Props> = ({\n  errorMessage,\n  setErrorMessage = () => {},\n}) => {\n  const [isHidden, setIsHidden] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsHidden(!!errorMessage);\n\n    setTimeout(() => {\n      setErrorMessage('');\n      setIsHidden(false);\n    }, 3000);\n  }, [errorMessage]);\n\n  const closeErrorMessage = () => {\n    setErrorMessage('');\n  };\n\n  return (\n    <div\n      data-cy=\"ErrorNotification\"\n      className={classNames(\n        'notification is-danger is-light has-text-weight-normal', {\n          hidden: !isHidden,\n        },\n      )}\n    >\n      <button\n        data-cy=\"HideErrorButton\"\n        type=\"button\"\n        className=\"delete\"\n        onClick={closeErrorMessage}\n      />\n\n      {errorMessage}\n    </div>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useEffect, useState } from 'react';\nimport { UserWarning } from './UserWarning';\nimport { Todo } from './types/Todo';\nimport { ErrorMessageEnum } from './types/ErrorMessageEnum';\nimport { USER_ID } from './helpers/UserID';\nimport { getData } from './helpers/HelperFunctions';\nimport { TodoApp } from './components/TodoApp/TodoApp';\nimport { Footer } from './components/Footer/Footer';\nimport { Query } from './types/Query';\nimport { QueryEnum } from './types/QueryEnum';\nimport { getPreparedTodos } from './components/TodosFilter/TodosFilter';\nimport { ErrorMessage } from './components/ErrorMessage/ErrorMessage';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [allTodos, setAllTodos] = useState<Todo[]>([]);\n  const [errorMessage, setErrorMessage] = useState<ErrorMessageEnum | ''>('');\n  const [query, setQuery] = useState<Query>(QueryEnum.All);\n\n  useEffect(() => {\n    getData([setTodos, setAllTodos], setErrorMessage);\n  }, []);\n\n  const preparedTodos = getPreparedTodos(todos, query);\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <TodoApp\n          todos={preparedTodos}\n          allTodos={allTodos}\n          setTodos={setTodos}\n          setAllTodos={setAllTodos}\n          setErrorMessage={setErrorMessage}\n        />\n\n        <Footer\n          allTodos={allTodos}\n          setAllTodos={setAllTodos}\n          setTodos={setTodos}\n          setErrorMessage={setErrorMessage}\n          setQuery={setQuery}\n        />\n\n      </div>\n\n      <ErrorMessage\n        errorMessage={errorMessage}\n        setErrorMessage={setErrorMessage}\n      />\n    </div>\n  );\n};\n","import { Query } from '../../types/Query';\nimport { Todo } from '../../types/Todo';\n\nexport const getPreparedTodos = (todos: Todo[], query: Query) => {\n  switch (query) {\n    case 'Active': {\n      return [...todos].filter(todo => todo.completed === false);\n    }\n\n    case 'Completed': {\n      return [...todos].filter(todo => todo.completed === true);\n    }\n\n    default:\n      return [...todos];\n  }\n};\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<App /> as React.ReactNode);\n"],"sourceRoot":""}